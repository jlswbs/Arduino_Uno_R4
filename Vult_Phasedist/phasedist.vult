/*
The MIT License (MIT)

Copyright (c) 2017 Leonardo Laguna Ruiz
-----
Implements the resonant filter simulation as shown in
http://en.wikipedia.org/wiki/Phase_distortion_synthesis

*/

fun nsine(x) @[table(size=128,min=0.0,max=1.0)] {
   return sin(6.283185307179586 * x);
}

fun edge(x:bool) : bool {
   mem pre;
   val ret = x && not(pre);
   pre = x;
   return ret;
}

fun change(x:real):bool {
    mem pre_x;
    val v:bool = pre_x <> x;
    pre_x = x;
    return v;
}

fun smooth(input){
   mem x;
   x = x+(input-x)*0.005;
   return x;
}

fun pitchToRate_1024(pitch) @[table(size=32,min=0.0,max=127.0)] {
   return 0.18984168003671556 * exp(0.057762265046662105 * pitch);
}

fun cvToPitch(cv) {
   return cv * 120.0 + 24.0;
}

fun cvToRate_1024(cv) @[table(size=32,min=0.0,max=0.9)] {
   return pitchToRate_1024(cvToPitch(cv));
}

fun phase(cv:real, reset:real) : real {
   mem rate;
   if(change(cv))
   {
      rate = cvToRate_1024(cv);
   }
   mem phase = if edge(reset > 0.5) then 0.0 else phase + rate;
   phase = if phase > 1024.0 then phase - 1024.0 else phase;
   return phase / 1024.0;
}

fun process(cv,detune) {
   mem pre_phase1;
   val phase1 = phase(cv, 0.0);
   val comp   = 1.0 - phase1;
   val reset  = pre_phase1 - phase1;
   pre_phase1 = phase1;
   val phase2 = phase(cv + smooth(detune / 2.0), reset);
   val sine  = nsine(phase2);
   return sine * comp;
}